// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id               String         @id @default(cuid())
  userId           String         @unique
  displayName      String
  username         String         @unique
  bio             String?
  avatar          String?
  location        String?
  timeZone        String?
  email           String
  role            String         @default("creator") // "creator", "client", "both"
  isVerified      Boolean        @default(false)
  joinDate        DateTime       @default(now())
  skills          String[]
  languages       String[]
  portfolio       PortfolioItem[]
  hourlyRate      Float?
  availability    String         @default("available") // "available", "busy", "unavailable"
  completedProjects Int          @default(0)
  rating          Float          @default(0)
  walletAddress   String?
  
  // Privacy settings
  showEmail       Boolean        @default(false)
  showRate        Boolean        @default(true)
  
  // Stats
  totalEarnings   Float?
  responseTime    String?
  
  // Relations
  createdJobs     Job[]          @relation("ClientJobs")
  assignedJobs    Job[]          @relation("CreatorJobs")
  proposals       Proposal[]     @relation("CreatorProposals")
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
  @@index([username])
}

model PortfolioItem {
  id             String      @id @default(cuid())
  title          String
  description    String
  image          String
  category       String
  client         String?
  completionDate DateTime
  tags           String[]
  
  // Relations
  profile        UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String

  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([profileId])
}

model Job {
  id             String      @id @default(cuid())
  title          String
  description    String
  category       String
  budget         Float
  timeframe      String
  skills         String[]
  requirements   String[]
  status         String      @default("open") // "draft", "open", "in_progress", "completed", "cancelled"
  attachments    String[]
  
  // Stats
  views          Int         @default(0)
  proposals      Int         @default(0)
  
  // Relations
  client         UserProfile @relation("ClientJobs", fields: [clientId], references: [id])
  clientId       String
  creator        UserProfile? @relation("CreatorJobs", fields: [creatorId], references: [id])
  creatorId      String?
  proposalsList  Proposal[]  @relation("JobProposals")
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  startedAt      DateTime?
  completedAt    DateTime?

  @@index([clientId])
  @@index([creatorId])
  @@index([category])
  @@index([status])
}

model Proposal {
  id             String      @id @default(cuid())
  coverLetter    String
  price          Float
  timeframe      String
  status         String      @default("pending") // "pending", "accepted", "rejected", "withdrawn"
  
  // Relations
  job            Job         @relation("JobProposals", fields: [jobId], references: [id], onDelete: Cascade)
  jobId          String
  creator        UserProfile @relation("CreatorProposals", fields: [creatorId], references: [id])
  creatorId      String
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([jobId])
  @@index([creatorId])
  @@index([status])
} 