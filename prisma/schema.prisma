// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id               String         @id @default(cuid())
  userId           String         @unique
  displayName      String
  username         String         @unique
  bio             String?
  avatar          String?
  location        String?
  timeZone        String?
  email           String
  role            String         @default("creator") // "creator", "client", "both"
  isVerified      Boolean        @default(false)
  joinDate        DateTime       @default(now())
  skills          String[]
  languages       String[]
  portfolio       PortfolioItem[]
  hourlyRate      Float?
  availability    String         @default("available") // "available", "busy", "unavailable"
  completedProjects Int          @default(0)
  rating          Float          @default(0)
  walletAddress   String?
  
  // Privacy settings
  showEmail       Boolean        @default(false)
  showRate        Boolean        @default(true)
  
  // Stats
  totalEarnings   Float?
  responseTime    String?
  
  // Relations
  createdJobs     Job[]          @relation("ClientJobs")
  assignedJobs    Job[]          @relation("CreatorJobs")
  proposals       Proposal[]     @relation("CreatorProposals")
  conversations   Conversation[] @relation("ConversationParticipants")
  messages        Message[]
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // New fields
  services        Service[]
  serviceRatings   ServiceRating[]
  jobRatings      JobRating[]    @relation("UserJobRatings")
  notifications   Notification[]
  messageStatuses MessageStatus[]

  @@index([userId])
  @@index([username])
}

model PortfolioItem {
  id             String      @id @default(cuid())
  title          String
  description    String
  image          String
  category       String
  client         String?
  completionDate DateTime
  tags           String[]
  
  // Relations
  profile        UserProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String

  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([profileId])
}

model Job {
  id             String      @id @default(cuid())
  title          String
  description    String
  category       String
  budget         Float
  timeframe      String
  skills         String[]
  requirements   String[]
  status         String      @default("open") // "draft", "open", "in_progress", "completed", "cancelled"
  attachments    String[]
  
  // Stats
  views          Int         @default(0)
  proposals      Int         @default(0)
  
  // Relations
  client         UserProfile @relation("ClientJobs", fields: [clientId], references: [id])
  clientId       String
  creator        UserProfile? @relation("CreatorJobs", fields: [creatorId], references: [id])
  creatorId      String?
  proposalsList  Proposal[]  @relation("JobProposals")
  conversation   Conversation?
  ratings        JobRating[]
  likesCount     Int         @default(0)
  dislikesCount  Int         @default(0)
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  startedAt      DateTime?
  completedAt    DateTime?

  @@index([clientId])
  @@index([creatorId])
  @@index([category])
  @@index([status])
}

model Proposal {
  id             String      @id @default(cuid())
  coverLetter    String
  price          Float
  timeframe      String
  status         String      @default("pending") // "pending", "accepted", "rejected", "withdrawn"
  
  // Relations
  job            Job         @relation("JobProposals", fields: [jobId], references: [id], onDelete: Cascade)
  jobId          String
  creator        UserProfile @relation("CreatorProposals", fields: [creatorId], references: [id])
  creatorId      String
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([jobId])
  @@index([creatorId])
  @@index([status])
}

model Conversation {
  id          String      @id @default(cuid())
  participants UserProfile[] @relation("ConversationParticipants")
  messages     Message[]
  jobId        String?    @unique
  job          Job?       @relation(fields: [jobId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([jobId])
}

model Message {
  id             String      @id @default(cuid())
  content        String
  senderId       String
  sender         UserProfile @relation(fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  attachments    String[]
  isRead         Boolean     @default(false)
  readBy         MessageStatus[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([senderId])
  @@index([conversationId])
}

model MessageStatus {
  id        String    @id @default(cuid())
  messageId String
  message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      UserProfile @relation(fields: [userId], references: [id])
  isRead    Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model Notification {
  id          String      @id @default(cuid())
  userId      String
  user        UserProfile @relation(fields: [userId], references: [id])
  type        String      // "message", "proposal", "job_update", etc.
  title       String
  content     String
  isRead      Boolean     @default(false)
  data        Json?       // Additional data specific to notification type
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([type])
  @@index([isRead])
}

model JobRating {
  id          String      @id @default(cuid())
  job         Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  user        UserProfile @relation("UserJobRatings", fields: [userId], references: [id])
  userId      String
  rating      Int         @default(0) // 0 = dislike, 1 = like
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([jobId, userId])
  @@index([jobId])
  @@index([userId])
}

model Service {
  id             String      @id @default(cuid())
  title          String
  description    String
  category       String
  pricing        ServicePricing?  @relation
  availability   String      @default("available") // "available", "busy", "unavailable"
  skills         String[]
  portfolio      String[]    // URLs to portfolio images
  provider       UserProfile @relation(fields: [providerId], references: [id])
  providerId     String
  ratings        ServiceRating[]
  likesCount     Int         @default(0)
  dislikesCount  Int         @default(0)
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([providerId])
  @@index([category])
}

model ServicePricing {
  id             String      @id @default(cuid())
  service        Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId      String      @unique
  type           String      @default("fixed") // "fixed", "hourly", "range"
  minPrice       Float
  maxPrice       Float?
  currency       String      @default("SOL")
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model ServiceRating {
  id             String      @id @default(cuid())
  service        Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId      String
  user           UserProfile @relation(fields: [userId], references: [id])
  userId         String
  rating         Int         @default(0) // 0 = dislike, 1 = like
  comment        String?
  
  // Timestamps
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([serviceId, userId])
  @@index([serviceId])
  @@index([userId])
} 